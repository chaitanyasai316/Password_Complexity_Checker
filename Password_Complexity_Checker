#include <stdio.h>
#include <string.h>
#include <ctype.h>

// Function to assess the strength of the password
int assess_password_strength(const char *password) 
{
    int length = strlen(password);
    int has_lower = 0, has_upper = 0, has_digit = 0, has_special = 0, score = 0;

    // Check password characteristics
    for (int i = 0; i < length; i++) 
    {
        if (islower(password[i])) has_lower = 1;
        else if (isupper(password[i])) has_upper = 1;
        else if (isdigit(password[i])) has_digit = 1;
        else if (strchr("@$!%*?&#", password[i])) has_special = 1;
    }

    // Calculate score based on length and characteristics
    if (length >= 8) score += 2;
    if (length >= 12) score += 2;
    if (has_lower) score += 2;
    if (has_upper) score += 2;
    if (has_digit) score += 1;
    if (has_special) score += 2;

    if (score > 10) score = 10;
    return score;
}

// Function to provide feedback on how to improve the password
void provide_feedback(const char *password) 
{
    int length = strlen(password);
    int has_lower = 0, has_upper = 0, has_digit = 0, has_special = 0;

    // Check password characteristics
    for (int i = 0; i < length; i++) 
    {
        if (islower(password[i])) has_lower = 1;
        else if (isupper(password[i])) has_upper = 1;
        else if (isdigit(password[i])) has_digit = 1;
        else if (strchr("@$!%*?&#", password[i])) has_special = 1;
    }

    // Provide feedback based on missing characteristics
    printf("\nFeedback:\n");
    if (length < 8) printf("- Password should be at least 8 characters long.\n");
    if (!has_lower) printf("- Password should contain at least one lowercase letter.\n");
    if (!has_upper) printf("- Password should contain at least one uppercase letter.\n");
    if (!has_digit) printf("- Password should contain at least one digit.\n");
    if (!has_special) printf("- Password should contain at least one special character (@, $, !, %, *, ?, &, #).\n");
    if (length >= 8 && length < 12) printf("- For extra security, consider using a password with 12 or more characters.\n");
    if (length >= 8 && has_lower && has_upper && has_digit && has_special) 
    {
        printf("- Your password is strong!\n");
    }
}

// Function to assess password and provide feedback
void assess_and_give_feedback(const char *password) 
{
    int score = assess_password_strength(password);
    printf("\nPassword Strength: ");

    // Display strength based on score
    if (score == 10) printf("Very Strong (Score: 10/10)\n");
    else if (score >= 8) printf("Strong (Score: %d/10)\n", score);
    else if (score >= 6) printf("Medium (Score: %d/10)\n", score);
    else if (score >= 4) printf("Weak (Score: %d/10)\n", score);
    else printf("Very Weak (Score: %d/10)\n", score);

    provide_feedback(password);
}

int main() 
{
    char password[100];

    printf("Password Strength Assessment Tool\n");
    printf("Enter your password: ");
    scanf("%99s", password);  // Added input length safety

    assess_and_give_feedback(password);

    return 0;
}
